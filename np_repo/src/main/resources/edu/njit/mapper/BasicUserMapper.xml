<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="edu.njit.mapper.BasicUserMapper" >
  <resultMap id="BaseResultMap" type="edu.njit.model.BasicUser" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="account" property="account" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="flag" property="flag" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="col1" property="col1" jdbcType="VARCHAR" />
    <result column="col3" property="col3" jdbcType="VARCHAR" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="edu.njit.model.BasicUser" extends="BaseResultMap" >
    <result column="col2" property="col2" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, account, password, user_id, flag, create_time, col1, col3
  </sql>
  <sql id="Blob_Column_List" >
    col2
  </sql>

  <select id="getBasicUserByUserId" resultType="edu.njit.model.BasicUser">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from t_basic_user
    where user_id=#{0}
  </select>

  <select id="selectUserByAccountAndPwd" resultType="edu.njit.model.BasicUser">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from t_basic_user
    where accout=#{0}
    and
    password=#{1}
  </select>
  <select id="selectUserByAccount" resultType="edu.njit.model.BasicUser">
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from t_basic_user
    where accout=#{0}
  </select>
  <select id="isStuWithFlag" resultType="boolean">
    select cast(flag as UNSIGNED INTEGER) from t_basic_user where id=#{0}
  </select>
  <select id="getTablePrimaryKeyForNext" resultType="int">
    select max(id)+1 from t_basic_user
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from t_basic_user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from t_basic_user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="edu.njit.model.BasicUser" >
    insert into t_basic_user (id, account, password, 
      user_id, flag, create_time, 
      col1, col3, col2
      )
    values (#{id,jdbcType=INTEGER}, #{account,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{userId,jdbcType=INTEGER}, #{flag,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{col1,jdbcType=VARCHAR}, #{col3,jdbcType=VARCHAR}, #{col2,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="edu.njit.model.BasicUser" >
    insert into t_basic_user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="account != null" >
        account,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="flag != null" >
        flag,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="col1 != null" >
        col1,
      </if>
      <if test="col3 != null" >
        col3,
      </if>
      <if test="col2 != null" >
        col2,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="account != null" >
        #{account,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="flag != null" >
        #{flag,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="col1 != null" >
        #{col1,jdbcType=VARCHAR},
      </if>
      <if test="col3 != null" >
        #{col3,jdbcType=VARCHAR},
      </if>
      <if test="col2 != null" >
        #{col2,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="edu.njit.model.BasicUser" >
    update t_basic_user
    <set >
      <if test="account != null" >
        account = #{account,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="flag != null" >
        flag = #{flag,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="col1 != null" >
        col1 = #{col1,jdbcType=VARCHAR},
      </if>
      <if test="col3 != null" >
        col3 = #{col3,jdbcType=VARCHAR},
      </if>
      <if test="col2 != null" >
        col2 = #{col2,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="edu.njit.model.BasicUser" >
    update t_basic_user
    set account = #{account,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=INTEGER},
      flag = #{flag,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      col1 = #{col1,jdbcType=VARCHAR},
      col3 = #{col3,jdbcType=VARCHAR},
      col2 = #{col2,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="edu.njit.model.BasicUser" >
    update t_basic_user
    set account = #{account,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=INTEGER},
      flag = #{flag,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      col1 = #{col1,jdbcType=VARCHAR},
      col3 = #{col3,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>